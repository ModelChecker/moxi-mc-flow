(set-logic ALL)
(define-system main 
   :input ((t2.EVENT.0 Bool) (t1.EVENT.0 Bool)) 
   :output ((t1.i Int) (t1.k Int) (t2.j Int) (t2.k Int)) 
   :local () 
   :init (let ((.def_19 t1.i)) (let ((.def_20 (= .def_19 1))) (let ((.def_16 t1.k)) (let ((.def_17 (= .def_16 0))) (let ((.def_12 t2.j)) (let ((.def_14 (= .def_12 1))) (let ((.def_9 t2.k)) (let ((.def_11 (= .def_9 0))) (let ((.def_15 (and .def_11 .def_14))) (let ((.def_18 (and .def_15 .def_17))) (and .def_18 .def_20))))))))))) 
   :trans (let ((.def_16 t1.k)) (let ((.def_62 (<= 5 .def_16))) (let ((.def_74 (not .def_62))) (let ((.def_19 t1.i)) (let ((.def_71 (= .def_19 t1.i'))) (let ((.def_70 (= .def_16 t1.k'))) (let ((.def_72 (and .def_70 .def_71))) (let ((.def_75 (or .def_72 .def_74))) (let ((.def_65 (not t1.EVENT.0))) (let ((.def_76 (or .def_65 .def_75))) (let ((.def_73 (or t1.EVENT.0 .def_72))) (let ((.def_77 (and .def_73 .def_76))) (let ((.def_32 (not t2.EVENT.0))) (let ((.def_68 (or .def_32 .def_65))) (let ((.def_55 (* (- 1) t1.i'))) (let ((.def_58 (+ .def_19 .def_55))) (let ((.def_12 t2.j)) (let ((.def_59 (+ .def_12 .def_58))) (let ((.def_60 (= .def_59 0))) (let ((.def_51 (* (- 1) t1.k'))) (let ((.def_52 (+ .def_16 .def_51))) (let ((.def_53 (= .def_52 (- 1)))) (let ((.def_61 (and .def_53 .def_60))) (let ((.def_63 (or .def_61 .def_62))) (let ((.def_66 (or .def_63 .def_65))) (let ((.def_28 (= .def_12 t2.j'))) (let ((.def_9 t2.k)) (let ((.def_26 (= .def_9 t2.k'))) (let ((.def_29 (and .def_26 .def_28))) (let ((.def_48 (or .def_29 t2.EVENT.0))) (let ((.def_38 (* (- 1) t2.j'))) (let ((.def_41 (+ .def_19 .def_38))) (let ((.def_42 (+ .def_12 .def_41))) (let ((.def_43 (= .def_42 0))) (let ((.def_35 (* (- 1) t2.k'))) (let ((.def_36 (+ .def_9 .def_35))) (let ((.def_37 (= .def_36 (- 1)))) (let ((.def_44 (and .def_37 .def_43))) (let ((.def_23 (<= 5 .def_9))) (let ((.def_45 (or .def_23 .def_44))) (let ((.def_46 (or .def_32 .def_45))) (let ((.def_24 (not .def_23))) (let ((.def_30 (or .def_24 .def_29))) (let ((.def_33 (or .def_30 .def_32))) (let ((.def_47 (and .def_33 .def_46))) (let ((.def_49 (and .def_47 .def_48))) (let ((.def_67 (and .def_49 .def_66))) (let ((.def_69 (and .def_67 .def_68))) (and .def_69 .def_77))))))))))))))))))))))))))))))))))))))))))))))))) 
   :inv true )
(check-system main 
   :input ((t2.EVENT.0 Bool) (t1.EVENT.0 Bool)) 
   :output ((t1.i Int) (t1.k Int) (t2.j Int) (t2.k Int)) 
   :local () 
   :reachable (rch_0 (not (let ((.def_19 t1.i)) (let ((.def_82 (<= .def_19 144))) (let ((.def_83 (not .def_82))) (let ((.def_12 t2.j)) (let ((.def_80 (<= .def_12 144))) (let ((.def_81 (not .def_80))) (let ((.def_84 (or .def_81 .def_83))) (not .def_84))))))))))
   :query (qry_rch_0 (rch_0)))