(set-logic QF_ABV)
(declare-enum-sort enum1 (Tr Fa))
(declare-enum-sort enum2 (ready busy))
(define-system main 
   :input () 
   :output ((request enum1) (state enum2) (nondet Bool) (p0 Bool) (p1 Bool) (EL_X_F_NOT__NOT_p1__OR_F_p0 Bool) (EL_X_F_p0 Bool)) 
   :local () 
   :init (= state ready) 
   :trans (and (and (= EL_X_F_NOT__NOT_p1__OR_F_p0 (let ((S_F_p0 (or p0' EL_X_F_p0'))) (let ((S_F_NOT__NOT_p1__OR_F_p0 (or (not (or (not p1') S_F_p0)) EL_X_F_NOT__NOT_p1__OR_F_p0'))) S_F_NOT__NOT_p1__OR_F_p0))) (= EL_X_F_p0 (let ((S_F_p0 (or p0' EL_X_F_p0'))) S_F_p0))) (= state' (ite (and (= state ready) (= request Tr)) busy (ite nondet ready (ite true busy busy))))) 
   :inv (and (= p0 (= state busy)) (= p1 (= request Tr))) )
(check-system main 
   :input () 
   :output ((request enum1) (state enum2) (nondet Bool) (p0 Bool) (p1 Bool) (EL_X_F_NOT__NOT_p1__OR_F_p0 Bool) (EL_X_F_p0 Bool)) 
   :local () 
   :fairness (fair_1 (= state busy))
   :fairness (fair_2 (or (not (let ((S_F_p0 (or p0 EL_X_F_p0))) (let ((S_F_NOT__NOT_p1__OR_F_p0 (or (not (or (not p1) S_F_p0)) EL_X_F_NOT__NOT_p1__OR_F_p0))) S_F_NOT__NOT_p1__OR_F_p0))) (not (or (not p1) (let ((S_F_p0 (or p0 EL_X_F_p0))) S_F_p0)))))
   :fairness (fair_3 (or (not (let ((S_F_p0 (or p0 EL_X_F_p0))) S_F_p0)) p0))
   :fairness (fair_4 true)
   :reachable (panda_1 (not (let ((S_F_p0 (or p0 EL_X_F_p0))) (let ((S_F_NOT__NOT_p1__OR_F_p0 (or (not (or (not p1) S_F_p0)) EL_X_F_NOT__NOT_p1__OR_F_p0))) (let ((S_NOT_F_NOT__NOT_p1__OR_F_p0 (not S_F_NOT__NOT_p1__OR_F_p0))) S_NOT_F_NOT__NOT_p1__OR_F_p0)))))
   :query (qry_panda_1 (panda_1 fair_1 fair_2 fair_3 fair_4)))