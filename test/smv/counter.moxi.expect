(set-logic QF_ABV)
(define-system counter_cell 
   :input ((carry_in Bool)) 
   :output ((value Bool) (carry_out Bool)) 
   :local () 
   :init (= value false) 
   :trans (= value' (xor value carry_in)) 
   :inv (= carry_out (and value carry_in)) )
(define-system main 
   :input () 
   :output ((p0 Bool) (EL_X_F_NOT_F_p0 Bool) (EL_X_F_p0 Bool)) 
   :local ((bit0.carry_in Bool) (bit0.value Bool) (bit0.carry_out Bool) (bit1.carry_in Bool) (bit1.value Bool) (bit1.carry_out Bool) (bit2.carry_in Bool) (bit2.value Bool) (bit2.carry_out Bool)) 
   :init true 
   :trans (and (= EL_X_F_NOT_F_p0 (let ((S_F_p0 (or p0' EL_X_F_p0'))) (let ((S_F_NOT_F_p0 (or (not S_F_p0) EL_X_F_NOT_F_p0'))) S_F_NOT_F_p0))) (= EL_X_F_p0 (let ((S_F_p0 (or p0' EL_X_F_p0'))) S_F_p0))) 
   :inv (and (= p0 bit2.carry_out) (= bit0.carry_in true) (= bit1.carry_in bit0.carry_out) (= bit2.carry_in bit1.carry_out)) 
   :subsys (bit0 (counter_cell bit0.carry_in bit0.value bit0.carry_out))
   :subsys (bit1 (counter_cell bit1.carry_in bit1.value bit1.carry_out))
   :subsys (bit2 (counter_cell bit2.carry_in bit2.value bit2.carry_out)))
(check-system main 
   :input () 
   :output ((p0 Bool) (EL_X_F_NOT_F_p0 Bool) (EL_X_F_p0 Bool)) 
   :local ((bit0.carry_in Bool) (bit0.value Bool) (bit0.carry_out Bool) (bit1.carry_in Bool) (bit1.value Bool) (bit1.carry_out Bool) (bit2.carry_in Bool) (bit2.value Bool) (bit2.carry_out Bool)) 
   :fairness (fair_1 (or (not (let ((S_F_p0 (or p0' EL_X_F_p0'))) (let ((S_F_NOT_F_p0 (or (not S_F_p0) EL_X_F_NOT_F_p0'))) S_F_NOT_F_p0))) (not (let ((S_F_p0 (or p0' EL_X_F_p0'))) S_F_p0))))
   :fairness (fair_2 (or (not (let ((S_F_p0 (or p0' EL_X_F_p0'))) S_F_p0)) p0))
   :fairness (fair_3 true)
   :reachable (panda_1 (not (let ((S_F_p0 (or p0 EL_X_F_p0))) (let ((S_F_NOT_F_p0 (or (not S_F_p0) EL_X_F_NOT_F_p0))) (let ((S_NOT_F_NOT_F_p0 (not S_F_NOT_F_p0))) S_NOT_F_NOT_F_p0)))))
   :query (qry_panda_1 (panda_1 fair_1 fair_2 fair_3)))