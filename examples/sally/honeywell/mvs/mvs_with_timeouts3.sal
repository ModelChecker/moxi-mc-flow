%
% ASYNCHRONOUS MID-VALUE SELECT
%
% - three components sample a common input
% - the values sampled form the three components are read by two separate 
%   voters that use a mid-value select to produce one output.
% - one sampler (fcm2) is faulty
% - we want to show that the two mid-value select outputs are within some
%   error bounds
%
% - the components are not synchronized.
%

mvs_with_timeouts3: CONTEXT = 

  BEGIN

  TIME: TYPE = REAL;
  
  %
  % Input = a triangular waveform
  %
  plant_period: TIME = 2;
  amplitude: REAL = 1;

  A: REAL = amplitude / (plant_period/2);

  %
  % Absolute value.
  %
  abs(x: REAL): REAL = IF (x < 0) THEN -x ELSE x ENDIF;

  %
  % Source module: f(t) at time t. The function f should be rate bounded, 
  % i.e., for all t1, t2 
  %   |f(t1) - f(t2)| <= A*|t1-t2|. 
  % We remember the previous value and make sure that new value is within
  % the range.
  %
  source: MODULE =
    BEGIN 
      INPUT time: TIME
      OUTPUT x: REAL
      LOCAL time_prev: TIME
      LOCAL x_prev: REAL
    TRANSITION
      x' IN { v: REAL | abs(v - x_prev) <= A*abs(time - time_prev) };
      time_prev' = time;
      x_prev' = x;      
    INITIALIZATION
      x = 0;
      x_prev = 0;
      time_prev = 0;
    END;

  
  %
  % Sampler module: period = fcm_period
  % - reads x at this period.
  %
  fcm_period: TIME = 0.2;

  fcm: MODULE =
    BEGIN
      INPUT
        time: TIME, 
        x: REAL
      OUTPUT 
        timeout: TIME,
        y, pre_y: REAL

      INITIALIZATION
        timeout IN { t: TIME | 0 <= t AND t < fcm_period };
        y = 0;
        pre_y = 0;

      TRANSITION
        [ time = timeout --> 
             timeout' = time + fcm_period;
             y' = x';
             pre_y' = y;
       [] 
          ELSE --> 
        ]
      END;


  %
  % Voter module: period = mvs_period
  % - input = y1, y2, y3 from three samplers
  %    + one validity flag bi for each input
  % - if bi is true then yi is good
  %   otherwise, yi is bad and not used in the vote
  %
  mvs_period: TIME = 0.05;

  midval(y1: REAL, y2: REAL, y3: REAL): REAL =
    IF y1 <= y2 THEN
       (IF y2 <= y3 THEN y2 ELSIF y1 <= y3 THEN y3 ELSE y1 ENDIF)
    ELSE
       (IF y1 <= y3 THEN y1 ELSIF y2 <= y3 THEN y3 ELSE y2 ENDIF)
    ENDIF;


  mvs: MODULE = 
    BEGIN
      INPUT
        y1, y2, y3: REAL,
        b1, b2, b3: BOOLEAN,
        time: TIME
      OUTPUT
        timeout: TIME,
        mvs: REAL

      INITIALIZATION
        timeout IN { t: TIME | 0 <= t AND t < mvs_period };
        mvs = 0;

      TRANSITION
        [ time = timeout -->
             timeout' = time + mvs_period;
             mvs' = midval( IF b1' THEN y1' ELSIF b2' AND NOT(b3') THEN y2' ELSIF b3' AND NOT(b2') THEN y3' ELSE mvs ENDIF,
                            IF b2' THEN y2' ELSIF b1' AND NOT(b3') THEN y1' ELSIF b3' AND NOT(b1') THEN y3' ELSE mvs ENDIF,
                            IF b3' THEN y3' ELSIF b1' AND NOT(b2') THEN y1' ELSIF b2' AND NOT(b1') THEN y2' ELSE mvs ENDIF);
       [] 
          ELSE -->
        ]
 
    END;


   %
   % Fault model: sampler 2 is faulty so c1_b2 and c2_b2 can true or false
   %
   fault_injection : MODULE = 
     BEGIN

     OUTPUT 
	c1_b1, c1_b2, c1_b3: BOOLEAN,
	c2_b1, c2_b2, c2_b3: BOOLEAN

     DEFINITION

	c1_b1 = true;
	c1_b2 IN { true, false } ;
	c1_b3 = true;
	
	c2_b1 = true;
	c2_b2 IN { true, false };
        c2_b3 = true;

     END;


   %
   % Faulty FCM: produces arbitrary output
   %
   epsilon: TIME = 0.001;

   faulty_fcm: MODULE = 
      BEGIN
        INPUT
          time: TIME
        OUTPUT
          timeout: TIME,
          y: REAL
        INITIALIZATION
          timeout IN { t: TIME | 0 <= t AND t < fcm_period };
        TRANSITION
          [ time = timeout --> 
               timeout' IN { t: TIME | time + epsilon <= t };
               y' IN { x: REAL | true };
         [] 
            ELSE --> 
          ]
      END;


   %
   % Full system: 
   % - synchronous composition of these components
   %
   system: MODULE =
	(RENAME timeout TO fcm_timeout1, y TO y1, pre_y TO pre_y1 IN fcm)
     || (RENAME timeout TO fcm_timeout2, y TO y2 IN faulty_fcm)
     || (RENAME timeout TO fcm_timeout3, y TO y3, pre_y TO pre_y3 IN fcm)
     || fault_injection
     || (RENAME b1 TO c1_b1, b2 TO c1_b2, b3 TO c1_b3, timeout TO mvs_timeout1, mvs TO mvs1 IN mvs)
     || (RENAME b1 TO c2_b1, b2 TO c2_b2, b3 TO c2_b3, timeout TO mvs_timeout2, mvs TO mvs2 IN mvs);

  
   %
   % Clock module: advance time to min(fcm_timeout1, fcm_timeout2, fcm_timeout3, mvs_timeout1, mvs_timeout2)
   %
   clock: MODULE =
     BEGIN
      INPUT
        fcm_timeout1, fcm_timeout2, fcm_timeout3: TIME,
        mvs_timeout1, mvs_timeout2: TIME
      OUTPUT
        time: TIME
      INITIALIZATION
        time = 0;
      TRANSITION
       [ time < fcm_timeout1 AND time < fcm_timeout2 AND time < fcm_timeout3 AND time < mvs_timeout1 AND time < mvs_timeout2 -->
               time' IN { t: TIME | t <= fcm_timeout1 AND t <= fcm_timeout2 AND t <= fcm_timeout3
                                    AND t <= mvs_timeout1 AND t <= mvs_timeout2 
                                    AND (t = fcm_timeout1 OR t = fcm_timeout2 OR t = fcm_timeout3 OR t = mvs_timeout1 OR t = mvs_timeout2) }; 
       ]
      END;


   full: MODULE = (system [] (clock || source));

   %
   % agreement can be proved by induction at depth 1
   %
   % lemmas: y_init1, y_invar1, y_init3, y_invar3,
   %         pre_y_init1, pre_y_invar1, pre_y_init3, pre_y_invar3
   %         fcm_timeout_bounds1, fcm_timeout_bounds3
   %         mvs_timeout_bounds1, mvs_timeout_bounds2
   %         mvs_bounds1, mvs_bounds2
   %
   error: REAL = A * (fcm_period + mvs_period);

   agreement: THEOREM full |- G(mvs1 - mvs2 <= error AND mvs2 - mvs1 <= error);

  END
