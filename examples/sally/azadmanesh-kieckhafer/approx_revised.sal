%
% Aanother approximate agreement protocol
%
% Reference:
%  M.H. Azadmanesh and R.M. Kieckhafer
%  Exploiting Omissive Faults in Synchronous
%  Approximate Agreement
%  IEEE Transactions on Computers, Vol 48, No 10, October 2000.
%
% This differs from approx.sal in ../approximate_agreement
% by using a different fault-tolerant averaging function and fault model.
%
% Revised fault model: SymmetricOmmissive now includes Good
%

approx_revised: CONTEXT =

BEGIN

  %
  % Fault mode: status of process i
  % - good: not faulty
  % - benign: faulty and known to be by all good processes (we ignore them for now)
  % - symmetric ommissive: sends nothing
  % - asymmetric ommissive: sends a correct value to some, nothing to others
  % - symmetric transmissive: sends the same value to all (possibly incorrect)
  % - asymmetric transmissive: can do anything
  %
  STATUS: TYPE = { Good, SymmetricOmissive, AsymmetricOmissive,
                   SymmetricTransmissive, AsymmetricTransmissive };


  %
  % The protocol requires N >= 3a + 2s + wa + ws + b + 1
  %                   and tau = a + s
  % where
  %   a = number of asymmetric transmissive faults
  %   s = number of symmetric transmissive faults
  %  wa = number of asymmetric omissive faults
  %  ws = number of summetric omissive faults
  %   b = number of benign faults.
  %
    
  N: NATURAL = 5;  %% number of processes

  TAU: NATURAL = 1; %% Maximal number of malicious faults (non-benign)


  PID: TYPE = [1 .. N];

  %
  % Data = real values
  %
  DATA: TYPE = REAL;

  %
  % Special value: 0 interpreted as nothing sent
  %
  missing: DATA = 0;


  %
  % Sort and filter function
  % - input: array v of N values
  % - output:
  %   n = number of values in v that are different from missing
  %   p = a permutation p of the N indices such that
  %   p[1] ... p[n] enumerate the n non-missing values of v in
  %   increasing order
  %
  sort_and_filter(v: ARRAY PID OF DATA, 
                  n: [0 .. N],
                  p: ARRAY PID OF PID): BOOLEAN =
        (FORALL (i: PID): i>n <=> v[p[i]] = missing)
    AND (FORALL (i: PID): i<n AND i<N => v[p[i]] <= v[p[i+1]])   %% We need i<N to convince SAL that this is type correct
    AND (FORALL (i, j: PID): p[i] = p[j] => i = j);


 
  %
  % Voting: midvalue select
  % - if we have n values, then we sort them in increasing
  %   order and return (x[tau+1] + x[n-tau])/2
  % 
  % If n is smaller than tau, we return missing.
  %
  % - input:
  %    v = array of N values
  %    n = number of non-missing values
  %    p = permutation as defined above
  %
  midval(a: DATA, b: DATA): DATA = (a + b)/2;

  vote(v: ARRAY PID OF DATA,
       n: [0 .. N],
       p: ARRAY PID OF PID): DATA =
    IF n > TAU THEN midval(v[p[TAU+1]], v[p[n-TAU]]) ELSE missing ENDIF;




  %
  % Fault scenarios
  % - all_good
  % - scenario1: one symmetric transmissive + one asymmetric omissive fault
  % - scenario2: one asymmetric transmissive + one asymmetric omissive fault
  %
  all_good(s: ARRAY PID OF STATUS): BOOLEAN = 
     (FORALL (i: PID): s[i] = Good);

  scenario1(s: ARRAY PID OF STATUS): BOOLEAN = 
     s[1] = SymmetricTransmissive AND 
     s[2] = AsymmetricOmissive AND
     (FORALL (i: PID): i > 2 => s[i] = Good);

  scenario2(s: ARRAY PID OF STATUS): BOOLEAN =
     s[1] = AsymmetricTransmissive AND 
     s[2] = AsymmetricOmissive AND
     (FORALL (i: PID): i > 2 => s[i] = Good);

  %
  % Initial precision: maximum difference between the values
  %
  initial_delta: { x: REAL| x > 0 };

  %
  % Approximate agreement: flat representation
  %   status[i] = status of process i
  %   v[i] = value of process i
  %   c[j][i] = channel from process i to process j
  %
  % So c[i][1], ..., c[i][N] = values received by process i
  %   n[i] = number of values in this list that are not missing
  %   p[i] = permutation used by process i
  %
  % To look at convergence properties, we add a variable delta
  % such that all | v[i] - v[j] | <= delta for all good processes i and j.
  % We want delta to decrease exponentially (with the number of rounds).
  %
  approx: MODULE =
  BEGIN
    OUTPUT
      v: ARRAY PID OF DATA,
      c: ARRAY PID OF ARRAY PID OF DATA,
      p: ARRAY PID OF ARRAY PID OF PID,
      n: ARRAY PID OF [0 .. N],
      status: ARRAY PID OF STATUS,
      round: INTEGER,
      delta: REAL

  INITIALIZATION
     %%
     %% Initial value: v[i] must not be missing
     %%
     delta = initial_delta;

     v IN { a: ARRAY PID OF DATA | 
             (FORALL (i: PID): a[i] > 0) AND (FORALL (i, j: PID): a[i] - a[j] <= initial_delta) };

     p = [[i: PID] [[j: PID] j]];

     round = 0;

     status IN { s: ARRAY PID OF STATUS | all_good(s) };
     
  TRANSITION
     round' = round + 1;

     status' = status;

     %%
     %% communication and fault model
     %%
     c' IN { x: ARRAY PID OF ARRAY PID OF DATA |
              (FORALL (i: PID): status[i] = Good => (FORALL (j: PID): x[j][i] = v[i]))
          AND (FORALL (i: PID): status[i] = SymmetricOmissive => (FORALL (j: PID): x[j][i] = missing) OR (FORALL (j: PID): x[j][i] = v[i]))
          AND (FORALL (i: PID): status[i] = AsymmetricOmissive => (FORALL (j: PID): x[j][i] = missing OR x[j][i] = v[i]))
          AND (FORALL (i: PID): status[i] = SymmetricTransmissive => (FORALL (j, k: PID): x[j][i] = x[k][i]))
        };


     %%
     %% update rule:
     %% - process i receives c'[1][i] ... c'[N][i]
     %% - it removes all the missing values
     %% - it sorts the rest in increasing order
     %% - then it picks the median as its new value
     %%
     n' IN { x: ARRAY PID OF [0 .. N] | true };

     p' IN { x: ARRAY PID OF ARRAY PID OF PID | FORALL (i: PID): sort_and_filter(c'[i], n'[i], x[i]) }; 

     %%
     %% voting
     %%
     v' IN { x: ARRAY PID OF DATA | FORALL (i: PID): x[i] = vote(c'[i], n'[i], p'[i]) };

     %%
     %% convergence
     %%
     delta' = delta/2;
  
  END;


  %%
  %% Sanity check: v[i] is never missing
  %%
  sanity: LEMMA approx |- G(FORALL (i: PID): v[i] /= missing);
  

  %%
  %% Convergence property
  %%
  convergence: LEMMA approx |- G(FORALL (i, j: PID): v[i] - v[j] <= delta);

END
