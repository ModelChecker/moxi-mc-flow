;; Maintain Sum and n
(define-state-type ST ((Sum Real) (n Real)))
;; Initial states: Sum = 0, n = 0
(define-states Init ST (and (= Sum 0) (= n 0)))

;; Transition: Sum += n
(define-transition Trans1 ST 
  (and 
    (= next.Sum (+ state.Sum state.n))
    (= next.n (+ state.n 1))
  )
)   

;; Transition system: Sum = 1 + 2 + ... + (n-1)
(define-transition-system T1 ST Init Trans1)
;; Sum = n*(n-1)/2
(query T1 (= Sum (/ (* n (- n 1)) 2)))

;; Transition: Sum += n^2
(define-transition Trans2 ST 
  (and 
    (= next.Sum (+ state.Sum (* state.n state.n)))
    (= next.n (+ state.n 1))
  )
)   

;; Transition system: Sum = 1^2 + 2^2 + ... + (n-1)^2
(define-transition-system T2 ST Init Trans2)
;; Sum = n*(n-1)/2
(query T2 (= Sum (/ (* n (- n 1) (- (* 2 n) 1)) 6)))
